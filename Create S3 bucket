S3 (Simple Storage Service):

Create and manage S3 buckets.
Upload and download files to/from S3.
Set and retrieve bucket policies and access control lists (ACLs).

---------------------------------------------------------------------------

import boto3
import botocore

# Replace 'your_access_key' and 'your_secret_key' with your AWS access key and secret key
aws_access_key = 'your_access_key'
aws_secret_key = 'your_secret_key'

# Replace 'your_s3_bucket_name' with the desired S3 bucket name
s3_bucket_name = 'your_s3_bucket_name'

# Create an S3 client
s3_client = boto3.client('s3', aws_access_key_id=aws_access_key, aws_secret_access_key=aws_secret_key)

try:
    # Create an S3 bucket
    s3_client.create_bucket(Bucket=s3_bucket_name)
    print(f"S3 bucket '{s3_bucket_name}' created successfully.")

    # Upload a file to S3 (replace 'your_local_file.txt' with the local file path)
    local_file_path = 'your_local_file.txt'
    s3_object_key = 'your_s3_object_key'
    s3_client.upload_file(local_file_path, s3_bucket_name, s3_object_key)
    print(f"File '{local_file_path}' uploaded to S3 bucket '{s3_bucket_name}' with key '{s3_object_key}'.")

    # Download a file from S3 (replace 'your_downloaded_file.txt' with the desired local file path)
    downloaded_file_path = 'your_downloaded_file.txt'
    s3_client.download_file(s3_bucket_name, s3_object_key, downloaded_file_path)
    print(f"File '{s3_object_key}' downloaded from S3 bucket '{s3_bucket_name}' to '{downloaded_file_path}'.")

    # Set bucket policy (replace 'your_bucket_policy' with the desired policy)
    bucket_policy = {
        "Version": "2012-10-17",
        "Statement": [
            {
                "Effect": "Allow",
                "Principal": "*",
                "Action": "s3:GetObject",
                "Resource": f"arn:aws:s3:::{s3_bucket_name}/*"
            }
        ]
    }
    s3_client.put_bucket_policy(Bucket=s3_bucket_name, Policy=str(bucket_policy))
    print(f"Bucket policy set for S3 bucket '{s3_bucket_name}':\n{bucket_policy}")

    # Retrieve bucket ACL
    bucket_acl = s3_client.get_bucket_acl(Bucket=s3_bucket_name)
    print(f"Bucket ACL for S3 bucket '{s3_bucket_name}':\n{bucket_acl}")

except botocore.exceptions.ClientError as e:
    if e.response['Error']['Code'] == 'BucketAlreadyOwnedByYou':
        print(f"S3 bucket '{s3_bucket_name}' already exists.")
    else:
        print(f"Error: {str(e)}")
except Exception as e:
    print(f"Error: {str(e)}")



--------------------------------------------------------------


#1. Create S3 Bucket:

import boto3
import botocore

# Replace 'your_access_key' and 'your_secret_key' with your AWS access key and secret key
aws_access_key = 'your_access_key'
aws_secret_key = 'your_secret_key'

# Replace 'your_s3_bucket_name' with the desired S3 bucket name
s3_bucket_name = 'your_s3_bucket_name'

# Create an S3 client
s3_client = boto3.client('s3', aws_access_key_id=aws_access_key, aws_secret_access_key=aws_secret_key)

try:
    # Create an S3 bucket
    s3_client.create_bucket(Bucket=s3_bucket_name)
    print(f"S3 bucket '{s3_bucket_name}' created successfully.")

except botocore.exceptions.ClientError as e:
    if e.response['Error']['Code'] == 'BucketAlreadyOwnedByYou':
        print(f"S3 bucket '{s3_bucket_name}' already exists.")
    else:
        print(f"Error creating S3 bucket: {str(e)}")
except Exception as e:
    print(f"Error: {str(e)}")




#2. Upload File to S3:

import boto3

# Replace 'your_access_key' and 'your_secret_key' with your AWS access key and secret key
aws_access_key = 'your_access_key'
aws_secret_key = 'your_secret_key'

# Replace 'your_s3_bucket_name' with the S3 bucket name
s3_bucket_name = 'your_s3_bucket_name'

# Replace 'your_local_file.txt' with the local file path
local_file_path = 'your_local_file.txt'

# Replace 'your_s3_object_key' with the desired S3 object key
s3_object_key = 'your_s3_object_key'

# Create an S3 client
s3_client = boto3.client('s3', aws_access_key_id=aws_access_key, aws_secret_access_key=aws_secret_key)

try:
    # Upload a file to S3
    s3_client.upload_file(local_file_path, s3_bucket_name, s3_object_key)
    print(f"File '{local_file_path}' uploaded to S3 bucket '{s3_bucket_name}' with key '{s3_object_key}'.")

except Exception as e:
    print(f"Error uploading file to S3: {str(e)}")




#3. Download File from S3:

import boto3

# Replace 'your_access_key' and 'your_secret_key' with your AWS access key and secret key
aws_access_key = 'your_access_key'
aws_secret_key = 'your_secret_key'

# Replace 'your_s3_bucket_name' with the S3 bucket name
s3_bucket_name = 'your_s3_bucket_name'

# Replace 'your_s3_object_key' with the S3 object key to download
s3_object_key = 'your_s3_object_key'

# Replace 'your_downloaded_file.txt' with the desired local file path for download
downloaded_file_path = 'your_downloaded_file.txt'

# Create an S3 client
s3_client = boto3.client('s3', aws_access_key_id=aws_access_key, aws_secret_access_key=aws_secret_key)

try:
    # Download a file from S3
    s3_client.download_file(s3_bucket_name, s3_object_key, downloaded_file_path)
    print(f"File '{s3_object_key}' downloaded from S3 bucket '{s3_bucket_name}' to '{downloaded_file_path}'.")

except Exception as e:
    print(f"Error downloading file from S3: {str(e)}")





#4. Set S3 Bucket Policy:

import boto3

# Replace 'your_access_key' and 'your_secret_key' with your AWS access key and secret key
aws_access_key = 'your_access_key'
aws_secret_key = 'your_secret_key'

# Replace 'your_s3_bucket_name' with the S3 bucket name
s3_bucket_name = 'your_s3_bucket_name'

# Replace 'your_bucket_policy' with the desired bucket policy
bucket_policy = {
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": "*",
            "Action": "s3:GetObject",
            "Resource": f"arn:aws:s3:::{s3_bucket_name}/*"
        }
    ]
}

# Create an S3 client
s3_client = boto3.client('s3', aws_access_key_id=aws_access_key, aws_secret_access_key=aws_secret_key)

try:
    # Set bucket policy
    s3_client.put_bucket_policy(Bucket=s3_bucket_name, Policy=str(bucket_policy))
    print(f"Bucket policy set for S3 bucket '{s3_bucket_name}':\n{bucket_policy}")

except Exception as e:
    print(f"Error setting bucket policy for S3: {str(e)}")





#5. Retrieve S3 Bucket ACL:

import boto3

# Replace 'your_access_key' and 'your_secret_key' with your AWS access key and secret key
aws_access_key = 'your_access_key'
aws_secret_key = 'your_secret_key'

# Replace 'your_s3_bucket_name' with the S3 bucket name
s3_bucket_name = 'your_s3_bucket_name'

# Create an S3 client
s3_client = boto3.client('s3', aws_access_key_id=aws_access_key, aws_secret_access_key=aws_secret_key)

try:
    # Retrieve bucket ACL
    bucket_acl = s3_client.get_bucket_acl(Bucket=s3_bucket_name)
    print(f"Bucket ACL for S3 bucket '{s3_bucket_name}':\n{bucket_acl}")

except Exception as e:
    print(f"Error retrieving bucket ACL for S3: {str(e)}")

